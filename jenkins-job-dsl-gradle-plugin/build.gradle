
dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'

    testCompile gradleTestKit()
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

def generatedResourcesDir = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResourcesDir, builtBy: 'generateResources')
    }
}

task generateResources << {
    project.file(generatedResourcesDir).mkdirs()

    def props = new Properties()
    props.pluginVersion = project.version.toString()
    props.jobDsl = versions.jobDsl
    props.groovy = versions.groovy
    props.spock = versions.spock

    def dir = project.file("${generatedResourcesDir}/com/aoe/gradle/jenkinsjobdsl")
    dir.mkdirs()
    def file = project.file("${dir}/dependencyVersions.properties")
    file.withDataOutputStream { props.store(it, null) }
}


// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}

test.dependsOn ":jenkins-job-dsl-test-support:publishToMavenLocal"