buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.12.0"
    }
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'com.gradle.plugin-publish'

dependencies {
    implementation localGroovy()
    implementation 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'

    testImplementation("org.spockframework:spock-core:${versions.spock}") {
        exclude module: 'groovy-all'
    }
}

ext {
    generatedResourcesDir = "$buildDir/generated-resources/main"
}

sourceSets {
    main {
        output.dir(generatedResourcesDir, builtBy: 'generateResources')
    }
}

task generateResources {
    def dir = project.file("${generatedResourcesDir}/com/aoe/gradle/jenkinsjobdsl")
    def file = project.file("${dir}/dependencyVersions.properties")

    inputs.property('projectversion', project.version.toString())
    inputs.property('version.jobDsl', versions.jobDsl)
    inputs.property('version.groovy', versions.groovy)
    inputs.property('version.spock', versions.spock)
    outputs.files file

    doLast {
        project.file(generatedResourcesDir).mkdirs()

        def props = new Properties()
        props.pluginVersion = project.version.toString()
        props.jobDsl = versions.jobDsl
        props.groovy = versions.groovy
        props.spock = versions.spock

        dir.mkdirs()
        file.withDataOutputStream { props.store(it, null) }
    }
}

gradlePlugin {
    plugins {
        jobDslPlugin {
            id = "com.aoe.jenkins-job-dsl"
            implementationClass = "com.aoe.gradle.jenkinsjobdsl.JobDslPlugin"
        }
    }
}

pluginBundle {
    // These settings are set for the whole plugin bundle
    website = 'https://github.com/AOEpeople/gradle-jenkins-job-dsl-plugin'
    vcsUrl = 'https://github.com/AOEpeople/gradle-jenkins-job-dsl-plugin'
    description = 'This plugin provides some support tasks for maintaining a Jenkins Job DSL Script repository/project'
    tags = ['jobdsl', 'jenkins', 'job-dsl']

    plugins {
        jobDslPlugin {
            id = 'com.aoe.jenkins-job-dsl'
            displayName = 'Gradle Jenkins Job DSL support plugin'
        }
    }
}

test.dependsOn ":jenkins-job-dsl-test-support:publishToMavenLocal"

tasks.publishPlugins.mustRunAfter rootProject.tasks.release

if (ext.has('release.stage') && ext.get('release.stage') in ['rc', 'final']) {
    rootProject.tasks.postRelease.dependsOn tasks.publishPlugins, tasks.bintrayUpload
}
